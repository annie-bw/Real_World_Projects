from abc import ABC,abstractmethod
# Class to store and validate details of a single assignment
class Grades:
    def __init__(self, assignment_name, category, assignment_weight, grade_obtained):
        self.assignment_name = assignment_name
        self.category = category.lower()
        self.assignment_weight = float(assignment_weight)
        self.grade_obtained = float(grade_obtained)

    @property
    def assignment_weight(self):
        return self._assignment_weight

    @assignment_weight.setter #ensure weight does not exceed 100%
    def assignment_weight(self, value):
        if value <= 100:
            self._assignment_weight = value
        else:
            raise ValueError("Assignment weight must be less than or equal to 100%.")

    @property
    def grade_obtained(self):
        return self._grade_obtained

    @grade_obtained.setter #ensure grades does not exceed 100%
    def grade_obtained(self, value):
        if value <= 100:
            self._grade_obtained = value
        else:
            raise ValueError("Grade must be less than or equal to 100%.")

    def weighted_grade(self):
        return (self.assignment_weight * self.grade_obtained) / 100


# MAIN PROGRAM
print(".................Welcome to Get Your GPA.............")
assignments = []
formative_weight_total=0
summative_weight_total=0
while True:
    #input assignment name
    while True:
        assignment_name = input("Assignment name: ")
        if assignment_name == "":
            print("assignment name cannot be empty. Enter a valid name")
        else:
            break
     #get category
    while True:
        category = input("Category (Formative or Summative): ").strip().lower()
        if category not in ["formative", "summative"]:
            print("Invalid category. Please enter 'Formative' or 'Summative'.")
            continue
        else:
            break
      #get weight of assignment and grade obtained
    while True:
        try:
            assignment_weight = float(input("Weight of the assignment (as % of total grade): "))
            grade_obtained = float(input("Grade obtained (out of 100%): "))
            break
        except ValueError:
            print("Invalid input. Please enter numeric values for weight and grade.")
    # Check if the assignment weight is valid for the category
    if category == "formative":
        if formative_weight_total + assignment_weight > 60:
            print("Total formative assignment weight cannot exceed 60%.")
            continue
        formative_weight_total += assignment_weight
    else:
        if summative_weight_total + assignment_weight > 40:
            print("Total summative assignment weight cannot exceed 40%.")
            continue
        summative_weight_total += assignment_weight

    #store the assignment
    g = Grades(assignment_name, category, assignment_weight, grade_obtained)
    assignments.append(g)

    #ask user to input other assignments
    while True:
        more_assignments = input("Do you want to enter more assignments? (Yes/No): ").strip().lower()
        if more_assignments == "yes":
            # Go back to top of loop
            break
        elif more_assignments == "no":
            # Check final total
            total_weight = formative_weight_total + summative_weight_total
            if total_weight != 100:
                print("formative weight and summative weight have to total to 100%, please re-enter assignments")
                continue
            else:
                break
        else:
            print("Invalid input. Please type 'Yes' or 'No'.")
    if more_assignments == "no":
        break #if the user says no, exit out of the main loop
#Formatives
formative_grades = []
formative_total=0
formative_count=0
formative_average=0
for assignment in assignments:
    if assignment.category == "formative":
        formative_grades.append(assignment.weighted_grade())
        formative_total += assignment.weighted_grade()
        formative_count += 1
print("\n=============Formatives Report=============")
if formative_count > 0:
    formative_average = formative_total / len(formative_grades)
    print(f"Your Total of Formative Assessments: {formative_total:.2f}/60")

    #results
    if formative_total >= 30:
            print("well done, You passed the formatives")
    else:
            print("You failed the formatives, You will repeat the courses")
else:
     print("Error: No formative grades entered.")

#summatives
summative_grades = []
summative_total=0
summative_count=0
summative_average=0
for assignment in assignments:

    if assignment.category == "summative":
        summative_grades.append(assignment.weighted_grade())
        summative_total += assignment.weighted_grade()
        summative_count +=1
print("\n=============Summative Report =============")
if summative_count > 0:
    summative_average = summative_total / len(summative_grades)
    print(f"Your total of summative Assessments: {summative_total:.2f}/40")
    #results
    if summative_total >= 20:
        print("well done, You passed the summatives")
    else:
            print("You failed the summative assignments, you will repeat the courses")
else:
     print("Error: No summative grades entered.")

#Weighted grade calculation
total_marks=summative_total + formative_total
total_weighted_gpa=(total_marks/100)*5
print("\n =============Your Final GPA=============")
print(f"GPA: {total_weighted_gpa:.3f}/5")

# Final Result
if formative_count > 0 and summative_count > 0:
    if formative_total >= 30 and summative_total >= 20:
        print("Congratulations! You passed the courses.")
    else:
        print("You did not meet the pass mark, you will repeat")
else:
    print("\n Cannot evaluate final result: missing formative or summative grades.")
